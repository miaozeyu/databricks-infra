name: 'Terraform'

on:
  push:
    branches: [ main ]
    paths:
      - '.github/**'
      - 'notebooks/**'
      - '**/*.tf'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/**'
      - 'notebooks/**'
      - '**/*.tf'
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: .

env:
  TF_INPUT: false
  TF_IN_AUTOMATION: true
  TF_VAR_databricks_host: ${{ secrets.DATABRICKS_HOST }}
  TF_VAR_databricks_token: ${{ secrets.DATABRICKS_TOKEN }}

permissions:
  contents: read
  pull-requests: write
  actions: write  # Required for caching

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.7'

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        # Initialize Terraform
        terraform init
        
        # Run Terraform plan
        terraform plan -no-color -input=false \
          -var="databricks_host=${{ env.TF_VAR_databricks_host }}" \
          -var="databricks_token=${{ env.TF_VAR_databricks_token }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Initialize Terraform
        terraform init
        
        # Apply the Terraform plan if it exists, otherwise run apply directly
        if [ -f tfplan ]; then
          terraform apply -auto-approve -input=false tfplan
        else
          terraform apply -auto-approve -input=false \
            -var="databricks_host=${{ env.TF_VAR_databricks_host }}" \
            -var="databricks_token=${{ env.TF_VAR_databricks_token }}"
        fi
